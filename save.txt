import { useState, useEffect, useRef } from "react";

export default function useTimer() {
  const [isRunning, setIsRunning] = useState(false);
  const elapsedTimeRef = useRef(0);
  const timerIdRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    const startTimer = () => {
      setIsRunning(true);
      const startTime = Date.now() - elapsedTimeRef.current;

      timerIdRef.current = setInterval(() => {
        const now = Date.now();
        elapsedTimeRef.current = now - startTime;
      }, 1); // Update every millisecond
    };

    const stopTimer = () => {
      setIsRunning(false);
      if (timerIdRef.current) {
        clearInterval(timerIdRef.current);
        timerIdRef.current = null;
      }
    };

    if (isRunning) {
      startTimer();
    } else {
      stopTimer();
    }

    return stopTimer;
  }, [isRunning]);

  const start = () => {
    setIsRunning(true);
  };

  const stop = () => {
    setIsRunning(false);
  };

  const reset = () => {
    elapsedTimeRef.current = 0;
    setIsRunning(false);
  };

  // Format elapsed time to minutes and seconds
  const formatTime = (milliseconds: number) => {
    const totalSeconds = milliseconds / 1000;
    const minutes = Math.floor(totalSeconds / 60);
    let seconds = totalSeconds % 60;
    seconds = parseFloat(seconds.toFixed(2));
    return `${minutes}:${seconds}`;
  };

  return {
    elapsedTime: elapsedTimeRef.current,
    isRunning,
    start,
    stop,
    reset,
    formattedTime: formatTime(elapsedTimeRef.current),
  };
}
